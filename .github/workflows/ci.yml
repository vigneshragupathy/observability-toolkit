name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  validate:
    name: Validate Configuration
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Setup Docker Compose compatibility
      run: |
        # Check which version of docker compose is available
        if command -v docker-compose &> /dev/null; then
          echo "DOCKER_COMPOSE_CMD=docker-compose" >> $GITHUB_ENV
          echo "Using docker-compose binary"
        elif docker compose version &> /dev/null; then
          echo "DOCKER_COMPOSE_CMD=docker compose" >> $GITHUB_ENV
          echo "Using docker compose plugin"
        else
          echo "Installing docker-compose as fallback"
          sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          echo "DOCKER_COMPOSE_CMD=docker-compose" >> $GITHUB_ENV
        fi

    - name: Validate Docker Compose
      run: |
        $DOCKER_COMPOSE_CMD config --quiet
        
    - name: Validate YAML files
      run: |
        # Install yamllint
        pip install yamllint
        
        # Validate all YAML files
        find . -name "*.yml" -o -name "*.yaml" | xargs yamllint -d relaxed

    - name: Check shell scripts
      run: |
        # Install shellcheck
        sudo apt-get update && sudo apt-get install -y shellcheck
        
        # Check all shell scripts
        find . -name "*.sh" | xargs shellcheck

  test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: validate
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Setup Docker Compose compatibility
      run: |
        # Check which version of docker compose is available
        if command -v docker-compose &> /dev/null; then
          echo "DOCKER_COMPOSE_CMD=docker-compose" >> $GITHUB_ENV
          echo "Using docker-compose binary"
        elif docker compose version &> /dev/null; then
          echo "DOCKER_COMPOSE_CMD=docker compose" >> $GITHUB_ENV
          echo "Using docker compose plugin"
        else
          echo "Installing docker-compose as fallback"
          sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          echo "DOCKER_COMPOSE_CMD=docker-compose" >> $GITHUB_ENV
        fi

    - name: Start observability stack
      run: |
        chmod +x manage-stack.sh
        ./manage-stack.sh start

    - name: Wait for services to be ready
      run: |
        # Wait for services to start
        sleep 60
        
        # Check if all services are running
        $DOCKER_COMPOSE_CMD ps
        
    - name: Test service health
      run: |
        # Test Prometheus
        curl -f http://localhost:9090/-/healthy || exit 1
        
        # Test Grafana
        curl -f http://localhost:3000/api/health || exit 1
        
        # Test Elasticsearch
        curl -f http://localhost:9200/_cluster/health || exit 1
        
        # Test Jaeger
        curl -f http://localhost:16686/ || exit 1
        
        # Test AlertManager
        curl -f http://localhost:9093/-/healthy || exit 1

    - name: Test metrics collection
      run: |
        # Check if Prometheus is collecting metrics
        curl -s http://localhost:9090/api/v1/query?query=up | grep -q '"status":"success"'
        
    - name: Test OpenTelemetry Collector
      run: |
        # Check OTEL collector health
        curl -f http://localhost:13133/ || exit 1

    - name: Cleanup
      if: always()
      run: |
        ./manage-stack.sh cleanup || true

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: validate
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Check for security issues in configurations
      run: |
        # Check for common security issues
        echo "Checking for default passwords..."
        if grep -r "admin:admin" config/ --exclude-dir=.git; then
          echo "Warning: Default passwords found in configuration"
          exit 1
        fi
        
        echo "Checking for hardcoded secrets..."
        if grep -r "password\|secret\|token" config/ --exclude-dir=.git | grep -v example; then
          echo "Warning: Potential hardcoded secrets found"
          exit 1
        fi

  documentation:
    name: Check Documentation
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Check for required files
      run: |
        # Check for required documentation files
        test -f README.md || (echo "README.md is missing" && exit 1)
        test -f LICENSE || (echo "LICENSE is missing" && exit 1)
        test -f CONTRIBUTING.md || (echo "CONTRIBUTING.md is missing" && exit 1)
        test -f SECURITY.md || (echo "SECURITY.md is missing" && exit 1)
        test -f .gitignore || (echo ".gitignore is missing" && exit 1)

    - name: Check markdown links
      uses: gaurav-nelson/github-action-markdown-link-check@v1
      with:
        use-quiet-mode: 'yes'
